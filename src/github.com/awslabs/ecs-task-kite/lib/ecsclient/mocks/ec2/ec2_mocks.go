// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/ec2/ec2iface (interfaces: EC2API)

package mock_ec2iface

import (
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
)

// Mock of EC2API interface
type MockEC2API struct {
	ctrl     *gomock.Controller
	recorder *_MockEC2APIRecorder
}

// Recorder for MockEC2API (not exported)
type _MockEC2APIRecorder struct {
	mock *MockEC2API
}

func NewMockEC2API(ctrl *gomock.Controller) *MockEC2API {
	mock := &MockEC2API{ctrl: ctrl}
	mock.recorder = &_MockEC2APIRecorder{mock}
	return mock
}

func (_m *MockEC2API) EXPECT() *_MockEC2APIRecorder {
	return _m.recorder
}

func (_m *MockEC2API) AcceptVPCPeeringConnection(_param0 *ec2.AcceptVPCPeeringConnectionInput) (*ec2.AcceptVPCPeeringConnectionOutput, error) {
	ret := _m.ctrl.Call(_m, "AcceptVPCPeeringConnection", _param0)
	ret0, _ := ret[0].(*ec2.AcceptVPCPeeringConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AcceptVPCPeeringConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptVPCPeeringConnection", arg0)
}

func (_m *MockEC2API) AllocateAddress(_param0 *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	ret := _m.ctrl.Call(_m, "AllocateAddress", _param0)
	ret0, _ := ret[0].(*ec2.AllocateAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AllocateAddress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllocateAddress", arg0)
}

func (_m *MockEC2API) AssignPrivateIPAddresses(_param0 *ec2.AssignPrivateIPAddressesInput) (*ec2.AssignPrivateIPAddressesOutput, error) {
	ret := _m.ctrl.Call(_m, "AssignPrivateIPAddresses", _param0)
	ret0, _ := ret[0].(*ec2.AssignPrivateIPAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AssignPrivateIPAddresses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssignPrivateIPAddresses", arg0)
}

func (_m *MockEC2API) AssociateAddress(_param0 *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	ret := _m.ctrl.Call(_m, "AssociateAddress", _param0)
	ret0, _ := ret[0].(*ec2.AssociateAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AssociateAddress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssociateAddress", arg0)
}

func (_m *MockEC2API) AssociateDHCPOptions(_param0 *ec2.AssociateDHCPOptionsInput) (*ec2.AssociateDHCPOptionsOutput, error) {
	ret := _m.ctrl.Call(_m, "AssociateDHCPOptions", _param0)
	ret0, _ := ret[0].(*ec2.AssociateDHCPOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AssociateDHCPOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssociateDHCPOptions", arg0)
}

func (_m *MockEC2API) AssociateRouteTable(_param0 *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	ret := _m.ctrl.Call(_m, "AssociateRouteTable", _param0)
	ret0, _ := ret[0].(*ec2.AssociateRouteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AssociateRouteTable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssociateRouteTable", arg0)
}

func (_m *MockEC2API) AttachClassicLinkVPC(_param0 *ec2.AttachClassicLinkVPCInput) (*ec2.AttachClassicLinkVPCOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachClassicLinkVPC", _param0)
	ret0, _ := ret[0].(*ec2.AttachClassicLinkVPCOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AttachClassicLinkVPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachClassicLinkVPC", arg0)
}

func (_m *MockEC2API) AttachInternetGateway(_param0 *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachInternetGateway", _param0)
	ret0, _ := ret[0].(*ec2.AttachInternetGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AttachInternetGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachInternetGateway", arg0)
}

func (_m *MockEC2API) AttachNetworkInterface(_param0 *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachNetworkInterface", _param0)
	ret0, _ := ret[0].(*ec2.AttachNetworkInterfaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AttachNetworkInterface(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachNetworkInterface", arg0)
}

func (_m *MockEC2API) AttachVPNGateway(_param0 *ec2.AttachVPNGatewayInput) (*ec2.AttachVPNGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "AttachVPNGateway", _param0)
	ret0, _ := ret[0].(*ec2.AttachVPNGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AttachVPNGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachVPNGateway", arg0)
}

func (_m *MockEC2API) AttachVolume(_param0 *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	ret := _m.ctrl.Call(_m, "AttachVolume", _param0)
	ret0, _ := ret[0].(*ec2.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AttachVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttachVolume", arg0)
}

func (_m *MockEC2API) AuthorizeSecurityGroupEgress(_param0 *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	ret := _m.ctrl.Call(_m, "AuthorizeSecurityGroupEgress", _param0)
	ret0, _ := ret[0].(*ec2.AuthorizeSecurityGroupEgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AuthorizeSecurityGroupEgress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthorizeSecurityGroupEgress", arg0)
}

func (_m *MockEC2API) AuthorizeSecurityGroupIngress(_param0 *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	ret := _m.ctrl.Call(_m, "AuthorizeSecurityGroupIngress", _param0)
	ret0, _ := ret[0].(*ec2.AuthorizeSecurityGroupIngressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) AuthorizeSecurityGroupIngress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthorizeSecurityGroupIngress", arg0)
}

func (_m *MockEC2API) BundleInstance(_param0 *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	ret := _m.ctrl.Call(_m, "BundleInstance", _param0)
	ret0, _ := ret[0].(*ec2.BundleInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) BundleInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BundleInstance", arg0)
}

func (_m *MockEC2API) CancelBundleTask(_param0 *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelBundleTask", _param0)
	ret0, _ := ret[0].(*ec2.CancelBundleTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelBundleTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelBundleTask", arg0)
}

func (_m *MockEC2API) CancelConversionTask(_param0 *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelConversionTask", _param0)
	ret0, _ := ret[0].(*ec2.CancelConversionTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelConversionTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelConversionTask", arg0)
}

func (_m *MockEC2API) CancelExportTask(_param0 *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelExportTask", _param0)
	ret0, _ := ret[0].(*ec2.CancelExportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelExportTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelExportTask", arg0)
}

func (_m *MockEC2API) CancelImportTask(_param0 *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelImportTask", _param0)
	ret0, _ := ret[0].(*ec2.CancelImportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelImportTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelImportTask", arg0)
}

func (_m *MockEC2API) CancelReservedInstancesListing(_param0 *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelReservedInstancesListing", _param0)
	ret0, _ := ret[0].(*ec2.CancelReservedInstancesListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelReservedInstancesListing(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelReservedInstancesListing", arg0)
}

func (_m *MockEC2API) CancelSpotFleetRequests(_param0 *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelSpotFleetRequests", _param0)
	ret0, _ := ret[0].(*ec2.CancelSpotFleetRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelSpotFleetRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelSpotFleetRequests", arg0)
}

func (_m *MockEC2API) CancelSpotInstanceRequests(_param0 *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelSpotInstanceRequests", _param0)
	ret0, _ := ret[0].(*ec2.CancelSpotInstanceRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CancelSpotInstanceRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelSpotInstanceRequests", arg0)
}

func (_m *MockEC2API) ConfirmProductInstance(_param0 *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	ret := _m.ctrl.Call(_m, "ConfirmProductInstance", _param0)
	ret0, _ := ret[0].(*ec2.ConfirmProductInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ConfirmProductInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfirmProductInstance", arg0)
}

func (_m *MockEC2API) CopyImage(_param0 *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	ret := _m.ctrl.Call(_m, "CopyImage", _param0)
	ret0, _ := ret[0].(*ec2.CopyImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CopyImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopyImage", arg0)
}

func (_m *MockEC2API) CopySnapshot(_param0 *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	ret := _m.ctrl.Call(_m, "CopySnapshot", _param0)
	ret0, _ := ret[0].(*ec2.CopySnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CopySnapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopySnapshot", arg0)
}

func (_m *MockEC2API) CreateCustomerGateway(_param0 *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateCustomerGateway", _param0)
	ret0, _ := ret[0].(*ec2.CreateCustomerGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateCustomerGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCustomerGateway", arg0)
}

func (_m *MockEC2API) CreateDHCPOptions(_param0 *ec2.CreateDHCPOptionsInput) (*ec2.CreateDHCPOptionsOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateDHCPOptions", _param0)
	ret0, _ := ret[0].(*ec2.CreateDHCPOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateDHCPOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDHCPOptions", arg0)
}

func (_m *MockEC2API) CreateFlowLogs(_param0 *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateFlowLogs", _param0)
	ret0, _ := ret[0].(*ec2.CreateFlowLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateFlowLogs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFlowLogs", arg0)
}

func (_m *MockEC2API) CreateImage(_param0 *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateImage", _param0)
	ret0, _ := ret[0].(*ec2.CreateImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateImage", arg0)
}

func (_m *MockEC2API) CreateInstanceExportTask(_param0 *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateInstanceExportTask", _param0)
	ret0, _ := ret[0].(*ec2.CreateInstanceExportTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateInstanceExportTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInstanceExportTask", arg0)
}

func (_m *MockEC2API) CreateInternetGateway(_param0 *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateInternetGateway", _param0)
	ret0, _ := ret[0].(*ec2.CreateInternetGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateInternetGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateInternetGateway", arg0)
}

func (_m *MockEC2API) CreateKeyPair(_param0 *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateKeyPair", _param0)
	ret0, _ := ret[0].(*ec2.CreateKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateKeyPair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateKeyPair", arg0)
}

func (_m *MockEC2API) CreateNetworkACL(_param0 *ec2.CreateNetworkACLInput) (*ec2.CreateNetworkACLOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateNetworkACL", _param0)
	ret0, _ := ret[0].(*ec2.CreateNetworkACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateNetworkACL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateNetworkACL", arg0)
}

func (_m *MockEC2API) CreateNetworkACLEntry(_param0 *ec2.CreateNetworkACLEntryInput) (*ec2.CreateNetworkACLEntryOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateNetworkACLEntry", _param0)
	ret0, _ := ret[0].(*ec2.CreateNetworkACLEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateNetworkACLEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateNetworkACLEntry", arg0)
}

func (_m *MockEC2API) CreateNetworkInterface(_param0 *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateNetworkInterface", _param0)
	ret0, _ := ret[0].(*ec2.CreateNetworkInterfaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateNetworkInterface(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateNetworkInterface", arg0)
}

func (_m *MockEC2API) CreatePlacementGroup(_param0 *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "CreatePlacementGroup", _param0)
	ret0, _ := ret[0].(*ec2.CreatePlacementGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreatePlacementGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePlacementGroup", arg0)
}

func (_m *MockEC2API) CreateReservedInstancesListing(_param0 *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateReservedInstancesListing", _param0)
	ret0, _ := ret[0].(*ec2.CreateReservedInstancesListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateReservedInstancesListing(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateReservedInstancesListing", arg0)
}

func (_m *MockEC2API) CreateRoute(_param0 *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateRoute", _param0)
	ret0, _ := ret[0].(*ec2.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRoute", arg0)
}

func (_m *MockEC2API) CreateRouteTable(_param0 *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateRouteTable", _param0)
	ret0, _ := ret[0].(*ec2.CreateRouteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateRouteTable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRouteTable", arg0)
}

func (_m *MockEC2API) CreateSecurityGroup(_param0 *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateSecurityGroup", _param0)
	ret0, _ := ret[0].(*ec2.CreateSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateSecurityGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecurityGroup", arg0)
}

func (_m *MockEC2API) CreateSnapshot(_param0 *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "CreateSnapshot", _param0)
	ret0, _ := ret[0].(*ec2.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSnapshot", arg0)
}

func (_m *MockEC2API) CreateSpotDatafeedSubscription(_param0 *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateSpotDatafeedSubscription", _param0)
	ret0, _ := ret[0].(*ec2.CreateSpotDatafeedSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateSpotDatafeedSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSpotDatafeedSubscription", arg0)
}

func (_m *MockEC2API) CreateSubnet(_param0 *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateSubnet", _param0)
	ret0, _ := ret[0].(*ec2.CreateSubnetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateSubnet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSubnet", arg0)
}

func (_m *MockEC2API) CreateTags(_param0 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateTags", _param0)
	ret0, _ := ret[0].(*ec2.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTags", arg0)
}

func (_m *MockEC2API) CreateVPC(_param0 *ec2.CreateVPCInput) (*ec2.CreateVPCOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVPC", _param0)
	ret0, _ := ret[0].(*ec2.CreateVPCOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVPC", arg0)
}

func (_m *MockEC2API) CreateVPCEndpoint(_param0 *ec2.CreateVPCEndpointInput) (*ec2.CreateVPCEndpointOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVPCEndpoint", _param0)
	ret0, _ := ret[0].(*ec2.CreateVPCEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVPCEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVPCEndpoint", arg0)
}

func (_m *MockEC2API) CreateVPCPeeringConnection(_param0 *ec2.CreateVPCPeeringConnectionInput) (*ec2.CreateVPCPeeringConnectionOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVPCPeeringConnection", _param0)
	ret0, _ := ret[0].(*ec2.CreateVPCPeeringConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVPCPeeringConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVPCPeeringConnection", arg0)
}

func (_m *MockEC2API) CreateVPNConnection(_param0 *ec2.CreateVPNConnectionInput) (*ec2.CreateVPNConnectionOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVPNConnection", _param0)
	ret0, _ := ret[0].(*ec2.CreateVPNConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVPNConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVPNConnection", arg0)
}

func (_m *MockEC2API) CreateVPNConnectionRoute(_param0 *ec2.CreateVPNConnectionRouteInput) (*ec2.CreateVPNConnectionRouteOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVPNConnectionRoute", _param0)
	ret0, _ := ret[0].(*ec2.CreateVPNConnectionRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVPNConnectionRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVPNConnectionRoute", arg0)
}

func (_m *MockEC2API) CreateVPNGateway(_param0 *ec2.CreateVPNGatewayInput) (*ec2.CreateVPNGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateVPNGateway", _param0)
	ret0, _ := ret[0].(*ec2.CreateVPNGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVPNGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVPNGateway", arg0)
}

func (_m *MockEC2API) CreateVolume(_param0 *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	ret := _m.ctrl.Call(_m, "CreateVolume", _param0)
	ret0, _ := ret[0].(*ec2.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) CreateVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVolume", arg0)
}

func (_m *MockEC2API) DeleteCustomerGateway(_param0 *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteCustomerGateway", _param0)
	ret0, _ := ret[0].(*ec2.DeleteCustomerGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteCustomerGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCustomerGateway", arg0)
}

func (_m *MockEC2API) DeleteDHCPOptions(_param0 *ec2.DeleteDHCPOptionsInput) (*ec2.DeleteDHCPOptionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteDHCPOptions", _param0)
	ret0, _ := ret[0].(*ec2.DeleteDHCPOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteDHCPOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDHCPOptions", arg0)
}

func (_m *MockEC2API) DeleteFlowLogs(_param0 *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteFlowLogs", _param0)
	ret0, _ := ret[0].(*ec2.DeleteFlowLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteFlowLogs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFlowLogs", arg0)
}

func (_m *MockEC2API) DeleteInternetGateway(_param0 *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteInternetGateway", _param0)
	ret0, _ := ret[0].(*ec2.DeleteInternetGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteInternetGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInternetGateway", arg0)
}

func (_m *MockEC2API) DeleteKeyPair(_param0 *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteKeyPair", _param0)
	ret0, _ := ret[0].(*ec2.DeleteKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteKeyPair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteKeyPair", arg0)
}

func (_m *MockEC2API) DeleteNetworkACL(_param0 *ec2.DeleteNetworkACLInput) (*ec2.DeleteNetworkACLOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteNetworkACL", _param0)
	ret0, _ := ret[0].(*ec2.DeleteNetworkACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteNetworkACL(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteNetworkACL", arg0)
}

func (_m *MockEC2API) DeleteNetworkACLEntry(_param0 *ec2.DeleteNetworkACLEntryInput) (*ec2.DeleteNetworkACLEntryOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteNetworkACLEntry", _param0)
	ret0, _ := ret[0].(*ec2.DeleteNetworkACLEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteNetworkACLEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteNetworkACLEntry", arg0)
}

func (_m *MockEC2API) DeleteNetworkInterface(_param0 *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteNetworkInterface", _param0)
	ret0, _ := ret[0].(*ec2.DeleteNetworkInterfaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteNetworkInterface(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteNetworkInterface", arg0)
}

func (_m *MockEC2API) DeletePlacementGroup(_param0 *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "DeletePlacementGroup", _param0)
	ret0, _ := ret[0].(*ec2.DeletePlacementGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeletePlacementGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePlacementGroup", arg0)
}

func (_m *MockEC2API) DeleteRoute(_param0 *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteRoute", _param0)
	ret0, _ := ret[0].(*ec2.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRoute", arg0)
}

func (_m *MockEC2API) DeleteRouteTable(_param0 *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteRouteTable", _param0)
	ret0, _ := ret[0].(*ec2.DeleteRouteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteRouteTable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRouteTable", arg0)
}

func (_m *MockEC2API) DeleteSecurityGroup(_param0 *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSecurityGroup", _param0)
	ret0, _ := ret[0].(*ec2.DeleteSecurityGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteSecurityGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecurityGroup", arg0)
}

func (_m *MockEC2API) DeleteSnapshot(_param0 *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSnapshot", _param0)
	ret0, _ := ret[0].(*ec2.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSnapshot", arg0)
}

func (_m *MockEC2API) DeleteSpotDatafeedSubscription(_param0 *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSpotDatafeedSubscription", _param0)
	ret0, _ := ret[0].(*ec2.DeleteSpotDatafeedSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteSpotDatafeedSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSpotDatafeedSubscription", arg0)
}

func (_m *MockEC2API) DeleteSubnet(_param0 *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteSubnet", _param0)
	ret0, _ := ret[0].(*ec2.DeleteSubnetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteSubnet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSubnet", arg0)
}

func (_m *MockEC2API) DeleteTags(_param0 *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteTags", _param0)
	ret0, _ := ret[0].(*ec2.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTags", arg0)
}

func (_m *MockEC2API) DeleteVPC(_param0 *ec2.DeleteVPCInput) (*ec2.DeleteVPCOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVPC", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVPCOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVPC", arg0)
}

func (_m *MockEC2API) DeleteVPCEndpoints(_param0 *ec2.DeleteVPCEndpointsInput) (*ec2.DeleteVPCEndpointsOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVPCEndpoints", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVPCEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVPCEndpoints(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVPCEndpoints", arg0)
}

func (_m *MockEC2API) DeleteVPCPeeringConnection(_param0 *ec2.DeleteVPCPeeringConnectionInput) (*ec2.DeleteVPCPeeringConnectionOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVPCPeeringConnection", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVPCPeeringConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVPCPeeringConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVPCPeeringConnection", arg0)
}

func (_m *MockEC2API) DeleteVPNConnection(_param0 *ec2.DeleteVPNConnectionInput) (*ec2.DeleteVPNConnectionOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVPNConnection", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVPNConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVPNConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVPNConnection", arg0)
}

func (_m *MockEC2API) DeleteVPNConnectionRoute(_param0 *ec2.DeleteVPNConnectionRouteInput) (*ec2.DeleteVPNConnectionRouteOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVPNConnectionRoute", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVPNConnectionRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVPNConnectionRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVPNConnectionRoute", arg0)
}

func (_m *MockEC2API) DeleteVPNGateway(_param0 *ec2.DeleteVPNGatewayInput) (*ec2.DeleteVPNGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVPNGateway", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVPNGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVPNGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVPNGateway", arg0)
}

func (_m *MockEC2API) DeleteVolume(_param0 *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteVolume", _param0)
	ret0, _ := ret[0].(*ec2.DeleteVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeleteVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVolume", arg0)
}

func (_m *MockEC2API) DeregisterImage(_param0 *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterImage", _param0)
	ret0, _ := ret[0].(*ec2.DeregisterImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DeregisterImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterImage", arg0)
}

func (_m *MockEC2API) DescribeAccountAttributes(_param0 *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAccountAttributes", _param0)
	ret0, _ := ret[0].(*ec2.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeAccountAttributes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAccountAttributes", arg0)
}

func (_m *MockEC2API) DescribeAddresses(_param0 *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAddresses", _param0)
	ret0, _ := ret[0].(*ec2.DescribeAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeAddresses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAddresses", arg0)
}

func (_m *MockEC2API) DescribeAvailabilityZones(_param0 *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAvailabilityZones", _param0)
	ret0, _ := ret[0].(*ec2.DescribeAvailabilityZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeAvailabilityZones(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAvailabilityZones", arg0)
}

func (_m *MockEC2API) DescribeBundleTasks(_param0 *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeBundleTasks", _param0)
	ret0, _ := ret[0].(*ec2.DescribeBundleTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeBundleTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeBundleTasks", arg0)
}

func (_m *MockEC2API) DescribeClassicLinkInstances(_param0 *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeClassicLinkInstances", _param0)
	ret0, _ := ret[0].(*ec2.DescribeClassicLinkInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeClassicLinkInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeClassicLinkInstances", arg0)
}

func (_m *MockEC2API) DescribeConversionTasks(_param0 *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeConversionTasks", _param0)
	ret0, _ := ret[0].(*ec2.DescribeConversionTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeConversionTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeConversionTasks", arg0)
}

func (_m *MockEC2API) DescribeCustomerGateways(_param0 *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeCustomerGateways", _param0)
	ret0, _ := ret[0].(*ec2.DescribeCustomerGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeCustomerGateways(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeCustomerGateways", arg0)
}

func (_m *MockEC2API) DescribeDHCPOptions(_param0 *ec2.DescribeDHCPOptionsInput) (*ec2.DescribeDHCPOptionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeDHCPOptions", _param0)
	ret0, _ := ret[0].(*ec2.DescribeDHCPOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeDHCPOptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDHCPOptions", arg0)
}

func (_m *MockEC2API) DescribeExportTasks(_param0 *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeExportTasks", _param0)
	ret0, _ := ret[0].(*ec2.DescribeExportTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeExportTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeExportTasks", arg0)
}

func (_m *MockEC2API) DescribeFlowLogs(_param0 *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeFlowLogs", _param0)
	ret0, _ := ret[0].(*ec2.DescribeFlowLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeFlowLogs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeFlowLogs", arg0)
}

func (_m *MockEC2API) DescribeImageAttribute(_param0 *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeImageAttribute", _param0)
	ret0, _ := ret[0].(*ec2.DescribeImageAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeImageAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeImageAttribute", arg0)
}

func (_m *MockEC2API) DescribeImages(_param0 *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeImages", _param0)
	ret0, _ := ret[0].(*ec2.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeImages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeImages", arg0)
}

func (_m *MockEC2API) DescribeImportImageTasks(_param0 *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeImportImageTasks", _param0)
	ret0, _ := ret[0].(*ec2.DescribeImportImageTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeImportImageTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeImportImageTasks", arg0)
}

func (_m *MockEC2API) DescribeImportSnapshotTasks(_param0 *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeImportSnapshotTasks", _param0)
	ret0, _ := ret[0].(*ec2.DescribeImportSnapshotTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeImportSnapshotTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeImportSnapshotTasks", arg0)
}

func (_m *MockEC2API) DescribeInstanceAttribute(_param0 *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceAttribute", _param0)
	ret0, _ := ret[0].(*ec2.DescribeInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeInstanceAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceAttribute", arg0)
}

func (_m *MockEC2API) DescribeInstanceStatus(_param0 *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceStatus", _param0)
	ret0, _ := ret[0].(*ec2.DescribeInstanceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeInstanceStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceStatus", arg0)
}

func (_m *MockEC2API) DescribeInstanceStatusPages(_param0 *ec2.DescribeInstanceStatusInput, _param1 func(*ec2.DescribeInstanceStatusOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeInstanceStatusPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeInstanceStatusPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceStatusPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeInstances(_param0 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstances", _param0)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstances", arg0)
}

func (_m *MockEC2API) DescribeInstancesPages(_param0 *ec2.DescribeInstancesInput, _param1 func(*ec2.DescribeInstancesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeInstancesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancesPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeInternetGateways(_param0 *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInternetGateways", _param0)
	ret0, _ := ret[0].(*ec2.DescribeInternetGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeInternetGateways(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInternetGateways", arg0)
}

func (_m *MockEC2API) DescribeKeyPairs(_param0 *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeKeyPairs", _param0)
	ret0, _ := ret[0].(*ec2.DescribeKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeKeyPairs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeKeyPairs", arg0)
}

func (_m *MockEC2API) DescribeMovingAddresses(_param0 *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMovingAddresses", _param0)
	ret0, _ := ret[0].(*ec2.DescribeMovingAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeMovingAddresses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMovingAddresses", arg0)
}

func (_m *MockEC2API) DescribeNetworkACLs(_param0 *ec2.DescribeNetworkACLsInput) (*ec2.DescribeNetworkACLsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeNetworkACLs", _param0)
	ret0, _ := ret[0].(*ec2.DescribeNetworkACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeNetworkACLs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeNetworkACLs", arg0)
}

func (_m *MockEC2API) DescribeNetworkInterfaceAttribute(_param0 *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeNetworkInterfaceAttribute", _param0)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInterfaceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeNetworkInterfaceAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeNetworkInterfaceAttribute", arg0)
}

func (_m *MockEC2API) DescribeNetworkInterfaces(_param0 *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeNetworkInterfaces", _param0)
	ret0, _ := ret[0].(*ec2.DescribeNetworkInterfacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeNetworkInterfaces(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeNetworkInterfaces", arg0)
}

func (_m *MockEC2API) DescribePlacementGroups(_param0 *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribePlacementGroups", _param0)
	ret0, _ := ret[0].(*ec2.DescribePlacementGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribePlacementGroups(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePlacementGroups", arg0)
}

func (_m *MockEC2API) DescribePrefixLists(_param0 *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribePrefixLists", _param0)
	ret0, _ := ret[0].(*ec2.DescribePrefixListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribePrefixLists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePrefixLists", arg0)
}

func (_m *MockEC2API) DescribeRegions(_param0 *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeRegions", _param0)
	ret0, _ := ret[0].(*ec2.DescribeRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeRegions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRegions", arg0)
}

func (_m *MockEC2API) DescribeReservedInstances(_param0 *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeReservedInstances", _param0)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeReservedInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeReservedInstances", arg0)
}

func (_m *MockEC2API) DescribeReservedInstancesListings(_param0 *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeReservedInstancesListings", _param0)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesListingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeReservedInstancesListings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeReservedInstancesListings", arg0)
}

func (_m *MockEC2API) DescribeReservedInstancesModifications(_param0 *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeReservedInstancesModifications", _param0)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeReservedInstancesModifications(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeReservedInstancesModifications", arg0)
}

func (_m *MockEC2API) DescribeReservedInstancesModificationsPages(_param0 *ec2.DescribeReservedInstancesModificationsInput, _param1 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeReservedInstancesModificationsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeReservedInstancesModificationsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeReservedInstancesModificationsPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeReservedInstancesOfferings(_param0 *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeReservedInstancesOfferings", _param0)
	ret0, _ := ret[0].(*ec2.DescribeReservedInstancesOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeReservedInstancesOfferings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeReservedInstancesOfferings", arg0)
}

func (_m *MockEC2API) DescribeReservedInstancesOfferingsPages(_param0 *ec2.DescribeReservedInstancesOfferingsInput, _param1 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeReservedInstancesOfferingsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeReservedInstancesOfferingsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeReservedInstancesOfferingsPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeRouteTables(_param0 *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeRouteTables", _param0)
	ret0, _ := ret[0].(*ec2.DescribeRouteTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeRouteTables(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRouteTables", arg0)
}

func (_m *MockEC2API) DescribeSecurityGroups(_param0 *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSecurityGroups", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSecurityGroups(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSecurityGroups", arg0)
}

func (_m *MockEC2API) DescribeSnapshotAttribute(_param0 *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSnapshotAttribute", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSnapshotAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSnapshotAttribute", arg0)
}

func (_m *MockEC2API) DescribeSnapshots(_param0 *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSnapshots", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSnapshots(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSnapshots", arg0)
}

func (_m *MockEC2API) DescribeSnapshotsPages(_param0 *ec2.DescribeSnapshotsInput, _param1 func(*ec2.DescribeSnapshotsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeSnapshotsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeSnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSnapshotsPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeSpotDatafeedSubscription(_param0 *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSpotDatafeedSubscription", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSpotDatafeedSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSpotDatafeedSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotDatafeedSubscription", arg0)
}

func (_m *MockEC2API) DescribeSpotFleetInstances(_param0 *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSpotFleetInstances", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSpotFleetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSpotFleetInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotFleetInstances", arg0)
}

func (_m *MockEC2API) DescribeSpotFleetRequestHistory(_param0 *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSpotFleetRequestHistory", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSpotFleetRequestHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSpotFleetRequestHistory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotFleetRequestHistory", arg0)
}

func (_m *MockEC2API) DescribeSpotFleetRequests(_param0 *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSpotFleetRequests", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSpotFleetRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSpotFleetRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotFleetRequests", arg0)
}

func (_m *MockEC2API) DescribeSpotInstanceRequests(_param0 *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSpotInstanceRequests", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSpotInstanceRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSpotInstanceRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotInstanceRequests", arg0)
}

func (_m *MockEC2API) DescribeSpotPriceHistory(_param0 *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSpotPriceHistory", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSpotPriceHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSpotPriceHistory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotPriceHistory", arg0)
}

func (_m *MockEC2API) DescribeSpotPriceHistoryPages(_param0 *ec2.DescribeSpotPriceHistoryInput, _param1 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeSpotPriceHistoryPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeSpotPriceHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSpotPriceHistoryPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeSubnets(_param0 *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeSubnets", _param0)
	ret0, _ := ret[0].(*ec2.DescribeSubnetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeSubnets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSubnets", arg0)
}

func (_m *MockEC2API) DescribeTags(_param0 *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeTags", _param0)
	ret0, _ := ret[0].(*ec2.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeTags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeTags", arg0)
}

func (_m *MockEC2API) DescribeVPCAttribute(_param0 *ec2.DescribeVPCAttributeInput) (*ec2.DescribeVPCAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCAttribute", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPCAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPCAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCAttribute", arg0)
}

func (_m *MockEC2API) DescribeVPCClassicLink(_param0 *ec2.DescribeVPCClassicLinkInput) (*ec2.DescribeVPCClassicLinkOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCClassicLink", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPCClassicLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPCClassicLink(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCClassicLink", arg0)
}

func (_m *MockEC2API) DescribeVPCEndpointServices(_param0 *ec2.DescribeVPCEndpointServicesInput) (*ec2.DescribeVPCEndpointServicesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCEndpointServices", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPCEndpointServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPCEndpointServices(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCEndpointServices", arg0)
}

func (_m *MockEC2API) DescribeVPCEndpoints(_param0 *ec2.DescribeVPCEndpointsInput) (*ec2.DescribeVPCEndpointsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCEndpoints", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPCEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPCEndpoints(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCEndpoints", arg0)
}

func (_m *MockEC2API) DescribeVPCPeeringConnections(_param0 *ec2.DescribeVPCPeeringConnectionsInput) (*ec2.DescribeVPCPeeringConnectionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCPeeringConnections", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPCPeeringConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPCPeeringConnections(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCPeeringConnections", arg0)
}

func (_m *MockEC2API) DescribeVPCs(_param0 *ec2.DescribeVPCsInput) (*ec2.DescribeVPCsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCs", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPCsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPCs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCs", arg0)
}

func (_m *MockEC2API) DescribeVPNConnections(_param0 *ec2.DescribeVPNConnectionsInput) (*ec2.DescribeVPNConnectionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPNConnections", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPNConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPNConnections(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPNConnections", arg0)
}

func (_m *MockEC2API) DescribeVPNGateways(_param0 *ec2.DescribeVPNGatewaysInput) (*ec2.DescribeVPNGatewaysOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPNGateways", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVPNGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVPNGateways(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPNGateways", arg0)
}

func (_m *MockEC2API) DescribeVolumeAttribute(_param0 *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVolumeAttribute", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVolumeAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVolumeAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVolumeAttribute", arg0)
}

func (_m *MockEC2API) DescribeVolumeStatus(_param0 *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVolumeStatus", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVolumeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVolumeStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVolumeStatus", arg0)
}

func (_m *MockEC2API) DescribeVolumeStatusPages(_param0 *ec2.DescribeVolumeStatusInput, _param1 func(*ec2.DescribeVolumeStatusOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeVolumeStatusPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeVolumeStatusPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVolumeStatusPages", arg0, arg1)
}

func (_m *MockEC2API) DescribeVolumes(_param0 *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeVolumes", _param0)
	ret0, _ := ret[0].(*ec2.DescribeVolumesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DescribeVolumes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVolumes", arg0)
}

func (_m *MockEC2API) DescribeVolumesPages(_param0 *ec2.DescribeVolumesInput, _param1 func(*ec2.DescribeVolumesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeVolumesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEC2APIRecorder) DescribeVolumesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVolumesPages", arg0, arg1)
}

func (_m *MockEC2API) DetachClassicLinkVPC(_param0 *ec2.DetachClassicLinkVPCInput) (*ec2.DetachClassicLinkVPCOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachClassicLinkVPC", _param0)
	ret0, _ := ret[0].(*ec2.DetachClassicLinkVPCOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DetachClassicLinkVPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachClassicLinkVPC", arg0)
}

func (_m *MockEC2API) DetachInternetGateway(_param0 *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachInternetGateway", _param0)
	ret0, _ := ret[0].(*ec2.DetachInternetGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DetachInternetGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachInternetGateway", arg0)
}

func (_m *MockEC2API) DetachNetworkInterface(_param0 *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachNetworkInterface", _param0)
	ret0, _ := ret[0].(*ec2.DetachNetworkInterfaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DetachNetworkInterface(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachNetworkInterface", arg0)
}

func (_m *MockEC2API) DetachVPNGateway(_param0 *ec2.DetachVPNGatewayInput) (*ec2.DetachVPNGatewayOutput, error) {
	ret := _m.ctrl.Call(_m, "DetachVPNGateway", _param0)
	ret0, _ := ret[0].(*ec2.DetachVPNGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DetachVPNGateway(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachVPNGateway", arg0)
}

func (_m *MockEC2API) DetachVolume(_param0 *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	ret := _m.ctrl.Call(_m, "DetachVolume", _param0)
	ret0, _ := ret[0].(*ec2.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DetachVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DetachVolume", arg0)
}

func (_m *MockEC2API) DisableVGWRoutePropagation(_param0 *ec2.DisableVGWRoutePropagationInput) (*ec2.DisableVGWRoutePropagationOutput, error) {
	ret := _m.ctrl.Call(_m, "DisableVGWRoutePropagation", _param0)
	ret0, _ := ret[0].(*ec2.DisableVGWRoutePropagationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DisableVGWRoutePropagation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableVGWRoutePropagation", arg0)
}

func (_m *MockEC2API) DisableVPCClassicLink(_param0 *ec2.DisableVPCClassicLinkInput) (*ec2.DisableVPCClassicLinkOutput, error) {
	ret := _m.ctrl.Call(_m, "DisableVPCClassicLink", _param0)
	ret0, _ := ret[0].(*ec2.DisableVPCClassicLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DisableVPCClassicLink(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableVPCClassicLink", arg0)
}

func (_m *MockEC2API) DisassociateAddress(_param0 *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	ret := _m.ctrl.Call(_m, "DisassociateAddress", _param0)
	ret0, _ := ret[0].(*ec2.DisassociateAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DisassociateAddress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisassociateAddress", arg0)
}

func (_m *MockEC2API) DisassociateRouteTable(_param0 *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	ret := _m.ctrl.Call(_m, "DisassociateRouteTable", _param0)
	ret0, _ := ret[0].(*ec2.DisassociateRouteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) DisassociateRouteTable(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisassociateRouteTable", arg0)
}

func (_m *MockEC2API) EnableVGWRoutePropagation(_param0 *ec2.EnableVGWRoutePropagationInput) (*ec2.EnableVGWRoutePropagationOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableVGWRoutePropagation", _param0)
	ret0, _ := ret[0].(*ec2.EnableVGWRoutePropagationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) EnableVGWRoutePropagation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableVGWRoutePropagation", arg0)
}

func (_m *MockEC2API) EnableVPCClassicLink(_param0 *ec2.EnableVPCClassicLinkInput) (*ec2.EnableVPCClassicLinkOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableVPCClassicLink", _param0)
	ret0, _ := ret[0].(*ec2.EnableVPCClassicLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) EnableVPCClassicLink(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableVPCClassicLink", arg0)
}

func (_m *MockEC2API) EnableVolumeIO(_param0 *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableVolumeIO", _param0)
	ret0, _ := ret[0].(*ec2.EnableVolumeIOOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) EnableVolumeIO(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableVolumeIO", arg0)
}

func (_m *MockEC2API) GetConsoleOutput(_param0 *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	ret := _m.ctrl.Call(_m, "GetConsoleOutput", _param0)
	ret0, _ := ret[0].(*ec2.GetConsoleOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) GetConsoleOutput(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConsoleOutput", arg0)
}

func (_m *MockEC2API) GetPasswordData(_param0 *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	ret := _m.ctrl.Call(_m, "GetPasswordData", _param0)
	ret0, _ := ret[0].(*ec2.GetPasswordDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) GetPasswordData(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPasswordData", arg0)
}

func (_m *MockEC2API) ImportImage(_param0 *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	ret := _m.ctrl.Call(_m, "ImportImage", _param0)
	ret0, _ := ret[0].(*ec2.ImportImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ImportImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImportImage", arg0)
}

func (_m *MockEC2API) ImportInstance(_param0 *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	ret := _m.ctrl.Call(_m, "ImportInstance", _param0)
	ret0, _ := ret[0].(*ec2.ImportInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ImportInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImportInstance", arg0)
}

func (_m *MockEC2API) ImportKeyPair(_param0 *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	ret := _m.ctrl.Call(_m, "ImportKeyPair", _param0)
	ret0, _ := ret[0].(*ec2.ImportKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ImportKeyPair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImportKeyPair", arg0)
}

func (_m *MockEC2API) ImportSnapshot(_param0 *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	ret := _m.ctrl.Call(_m, "ImportSnapshot", _param0)
	ret0, _ := ret[0].(*ec2.ImportSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ImportSnapshot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImportSnapshot", arg0)
}

func (_m *MockEC2API) ImportVolume(_param0 *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	ret := _m.ctrl.Call(_m, "ImportVolume", _param0)
	ret0, _ := ret[0].(*ec2.ImportVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ImportVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImportVolume", arg0)
}

func (_m *MockEC2API) ModifyImageAttribute(_param0 *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyImageAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifyImageAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyImageAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyImageAttribute", arg0)
}

func (_m *MockEC2API) ModifyInstanceAttribute(_param0 *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyInstanceAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifyInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyInstanceAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyInstanceAttribute", arg0)
}

func (_m *MockEC2API) ModifyNetworkInterfaceAttribute(_param0 *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyNetworkInterfaceAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifyNetworkInterfaceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyNetworkInterfaceAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyNetworkInterfaceAttribute", arg0)
}

func (_m *MockEC2API) ModifyReservedInstances(_param0 *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyReservedInstances", _param0)
	ret0, _ := ret[0].(*ec2.ModifyReservedInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyReservedInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyReservedInstances", arg0)
}

func (_m *MockEC2API) ModifySnapshotAttribute(_param0 *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifySnapshotAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifySnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifySnapshotAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifySnapshotAttribute", arg0)
}

func (_m *MockEC2API) ModifySubnetAttribute(_param0 *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifySubnetAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifySubnetAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifySubnetAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifySubnetAttribute", arg0)
}

func (_m *MockEC2API) ModifyVPCAttribute(_param0 *ec2.ModifyVPCAttributeInput) (*ec2.ModifyVPCAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyVPCAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifyVPCAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyVPCAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyVPCAttribute", arg0)
}

func (_m *MockEC2API) ModifyVPCEndpoint(_param0 *ec2.ModifyVPCEndpointInput) (*ec2.ModifyVPCEndpointOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyVPCEndpoint", _param0)
	ret0, _ := ret[0].(*ec2.ModifyVPCEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyVPCEndpoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyVPCEndpoint", arg0)
}

func (_m *MockEC2API) ModifyVolumeAttribute(_param0 *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyVolumeAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ModifyVolumeAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ModifyVolumeAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyVolumeAttribute", arg0)
}

func (_m *MockEC2API) MonitorInstances(_param0 *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "MonitorInstances", _param0)
	ret0, _ := ret[0].(*ec2.MonitorInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) MonitorInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MonitorInstances", arg0)
}

func (_m *MockEC2API) MoveAddressToVPC(_param0 *ec2.MoveAddressToVPCInput) (*ec2.MoveAddressToVPCOutput, error) {
	ret := _m.ctrl.Call(_m, "MoveAddressToVPC", _param0)
	ret0, _ := ret[0].(*ec2.MoveAddressToVPCOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) MoveAddressToVPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveAddressToVPC", arg0)
}

func (_m *MockEC2API) PurchaseReservedInstancesOffering(_param0 *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	ret := _m.ctrl.Call(_m, "PurchaseReservedInstancesOffering", _param0)
	ret0, _ := ret[0].(*ec2.PurchaseReservedInstancesOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) PurchaseReservedInstancesOffering(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PurchaseReservedInstancesOffering", arg0)
}

func (_m *MockEC2API) RebootInstances(_param0 *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "RebootInstances", _param0)
	ret0, _ := ret[0].(*ec2.RebootInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RebootInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RebootInstances", arg0)
}

func (_m *MockEC2API) RegisterImage(_param0 *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterImage", _param0)
	ret0, _ := ret[0].(*ec2.RegisterImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RegisterImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterImage", arg0)
}

func (_m *MockEC2API) RejectVPCPeeringConnection(_param0 *ec2.RejectVPCPeeringConnectionInput) (*ec2.RejectVPCPeeringConnectionOutput, error) {
	ret := _m.ctrl.Call(_m, "RejectVPCPeeringConnection", _param0)
	ret0, _ := ret[0].(*ec2.RejectVPCPeeringConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RejectVPCPeeringConnection(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RejectVPCPeeringConnection", arg0)
}

func (_m *MockEC2API) ReleaseAddress(_param0 *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	ret := _m.ctrl.Call(_m, "ReleaseAddress", _param0)
	ret0, _ := ret[0].(*ec2.ReleaseAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ReleaseAddress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReleaseAddress", arg0)
}

func (_m *MockEC2API) ReplaceNetworkACLAssociation(_param0 *ec2.ReplaceNetworkACLAssociationInput) (*ec2.ReplaceNetworkACLAssociationOutput, error) {
	ret := _m.ctrl.Call(_m, "ReplaceNetworkACLAssociation", _param0)
	ret0, _ := ret[0].(*ec2.ReplaceNetworkACLAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ReplaceNetworkACLAssociation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceNetworkACLAssociation", arg0)
}

func (_m *MockEC2API) ReplaceNetworkACLEntry(_param0 *ec2.ReplaceNetworkACLEntryInput) (*ec2.ReplaceNetworkACLEntryOutput, error) {
	ret := _m.ctrl.Call(_m, "ReplaceNetworkACLEntry", _param0)
	ret0, _ := ret[0].(*ec2.ReplaceNetworkACLEntryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ReplaceNetworkACLEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceNetworkACLEntry", arg0)
}

func (_m *MockEC2API) ReplaceRoute(_param0 *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	ret := _m.ctrl.Call(_m, "ReplaceRoute", _param0)
	ret0, _ := ret[0].(*ec2.ReplaceRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ReplaceRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceRoute", arg0)
}

func (_m *MockEC2API) ReplaceRouteTableAssociation(_param0 *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	ret := _m.ctrl.Call(_m, "ReplaceRouteTableAssociation", _param0)
	ret0, _ := ret[0].(*ec2.ReplaceRouteTableAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ReplaceRouteTableAssociation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReplaceRouteTableAssociation", arg0)
}

func (_m *MockEC2API) ReportInstanceStatus(_param0 *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	ret := _m.ctrl.Call(_m, "ReportInstanceStatus", _param0)
	ret0, _ := ret[0].(*ec2.ReportInstanceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ReportInstanceStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReportInstanceStatus", arg0)
}

func (_m *MockEC2API) RequestSpotFleet(_param0 *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	ret := _m.ctrl.Call(_m, "RequestSpotFleet", _param0)
	ret0, _ := ret[0].(*ec2.RequestSpotFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RequestSpotFleet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestSpotFleet", arg0)
}

func (_m *MockEC2API) RequestSpotInstances(_param0 *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "RequestSpotInstances", _param0)
	ret0, _ := ret[0].(*ec2.RequestSpotInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RequestSpotInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestSpotInstances", arg0)
}

func (_m *MockEC2API) ResetImageAttribute(_param0 *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ResetImageAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ResetImageAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ResetImageAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetImageAttribute", arg0)
}

func (_m *MockEC2API) ResetInstanceAttribute(_param0 *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ResetInstanceAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ResetInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ResetInstanceAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetInstanceAttribute", arg0)
}

func (_m *MockEC2API) ResetNetworkInterfaceAttribute(_param0 *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ResetNetworkInterfaceAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ResetNetworkInterfaceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ResetNetworkInterfaceAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetNetworkInterfaceAttribute", arg0)
}

func (_m *MockEC2API) ResetSnapshotAttribute(_param0 *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	ret := _m.ctrl.Call(_m, "ResetSnapshotAttribute", _param0)
	ret0, _ := ret[0].(*ec2.ResetSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) ResetSnapshotAttribute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetSnapshotAttribute", arg0)
}

func (_m *MockEC2API) RestoreAddressToClassic(_param0 *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	ret := _m.ctrl.Call(_m, "RestoreAddressToClassic", _param0)
	ret0, _ := ret[0].(*ec2.RestoreAddressToClassicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RestoreAddressToClassic(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestoreAddressToClassic", arg0)
}

func (_m *MockEC2API) RevokeSecurityGroupEgress(_param0 *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	ret := _m.ctrl.Call(_m, "RevokeSecurityGroupEgress", _param0)
	ret0, _ := ret[0].(*ec2.RevokeSecurityGroupEgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RevokeSecurityGroupEgress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeSecurityGroupEgress", arg0)
}

func (_m *MockEC2API) RevokeSecurityGroupIngress(_param0 *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	ret := _m.ctrl.Call(_m, "RevokeSecurityGroupIngress", _param0)
	ret0, _ := ret[0].(*ec2.RevokeSecurityGroupIngressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RevokeSecurityGroupIngress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeSecurityGroupIngress", arg0)
}

func (_m *MockEC2API) RunInstances(_param0 *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	ret := _m.ctrl.Call(_m, "RunInstances", _param0)
	ret0, _ := ret[0].(*ec2.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) RunInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RunInstances", arg0)
}

func (_m *MockEC2API) StartInstances(_param0 *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "StartInstances", _param0)
	ret0, _ := ret[0].(*ec2.StartInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) StartInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartInstances", arg0)
}

func (_m *MockEC2API) StopInstances(_param0 *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "StopInstances", _param0)
	ret0, _ := ret[0].(*ec2.StopInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) StopInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopInstances", arg0)
}

func (_m *MockEC2API) TerminateInstances(_param0 *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "TerminateInstances", _param0)
	ret0, _ := ret[0].(*ec2.TerminateInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) TerminateInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TerminateInstances", arg0)
}

func (_m *MockEC2API) UnassignPrivateIPAddresses(_param0 *ec2.UnassignPrivateIPAddressesInput) (*ec2.UnassignPrivateIPAddressesOutput, error) {
	ret := _m.ctrl.Call(_m, "UnassignPrivateIPAddresses", _param0)
	ret0, _ := ret[0].(*ec2.UnassignPrivateIPAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) UnassignPrivateIPAddresses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnassignPrivateIPAddresses", arg0)
}

func (_m *MockEC2API) UnmonitorInstances(_param0 *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	ret := _m.ctrl.Call(_m, "UnmonitorInstances", _param0)
	ret0, _ := ret[0].(*ec2.UnmonitorInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEC2APIRecorder) UnmonitorInstances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmonitorInstances", arg0)
}
